/*
Deployment script for QuizDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "QuizDB"
:setvar DefaultFilePrefix "QuizDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQLEXPRESS\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[P_GETALLUSERS]...';


GO
-- =============================================
-- Author:		Anton Metlyakov
-- Create date: 02/12/2019
-- Description:	RETURNS USER LIST
-- Input : @RecordsCount, -1 - no limit
-- returns : table
-- =============================================
CREATE PROCEDURE [dbo].[P_GETALLUSERS]
@RecordsCount int = -1
AS
SET NOCOUNT ON
BEGIN												/* max INT value*/
	DECLARE @InternalRecordsCount int = CASE WHEN @RecordsCount<0 THEN 2147483648 ELSE @RecordsCount END
	SELECT	TOP (@InternalRecordsCount)  
		[USER_ID], 
		[FIRSTNAME], 
		[LASTNAME], 
		[USERNAME], 
		[HASHEDPASSWORD], 
		[ROLESFLAG], 
		[REGISTRATION_DATE], 
		[LAST_LOGON_DATE]
	FROM  dbo.V_M_USERS
END
GO
PRINT N'Creating [dbo].[P_GETNEXTPK]...';


GO

-- =============================================
-- Author:		Anton Metlyakov
-- Create date: 02/12/2019
-- Description:	Generates new identity number for given table name
-- Input : table name
-- returns : @ID int - next counter value
-- =============================================
CREATE PROCEDURE [dbo].[P_GETNEXTPK]
@TABLE_NAME VARCHAR(30),
 @ID NUMERIC OUT
AS
SET NOCOUNT ON
BEGIN
	IF NOT EXISTS (SELECT * FROM  [DBO].[S_PK_GENERATOR]  WHERE TABLE_NAME = @TABLE_NAME) 
		RAISERROR('Please add record for ''%s'' in PK generator table', 16, 1, @TABLE_NAME)
	 UPDATE [DBO].[S_PK_GENERATOR]  
	 SET TABLE_ID = TABLE_ID + 1,@ID = TABLE_ID + 1   
	 WHERE TABLE_NAME = @TABLE_NAME;
END
GO
PRINT N'Creating [dbo].[P_SAVEUSER]...';


GO

-- =============================================
-- Author:		Anton Metlyakov
-- Create date: 02/12/2019
-- Description:	Saves user to table M_USERS (new (id=-1)/update (id>=0))
-- Input : user info fields
-- return : @error number, if any
-- =============================================
CREATE PROCEDURE [dbo].[P_SAVEUSER]
	@USERID int=-1,
	@USERNAME nvarchar(100),
	@FIRSTNAME nvarchar(100),
	@LASTNAME nvarchar(100),
	@HASHEDPASSWORD nvarchar(100),
	@ROLESFLAG int = 1,
	@ERROR int out,
	@ERRORTEXT nvarchar(100) out
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	SET @ERROR = 0;
	SET @ERRORTEXT = '';
	BEGIN TRY
		IF (@USERID = -1) 
		BEGIN
		/* new user*/
			IF EXISTS(SELECT * FROM dbo.M_USERS WHERE USERNAME = @USERNAME)
				SELECT @ERROR = -1,	@ERRORTEXT = N'Dublicate Username '+@USERNAME + N' in M_USERS table';
			ELSE
			BEGIN
				DECLARE @NEWID NUMERIC;
				EXECUTE dbo.P_GETNEXTPK @TABLE_NAME = 'M_USERS', @ID = @NEWID OUT
				INSERT INTO dbo.M_USERS (USER_ID,FIRSTNAME,LASTNAME,USERNAME, HASHEDPASSWORD, ROLESFLAG,[REGISTRATION_DATE],[LAST_LOGON_DATE] )
					VALUES (@NEWID,@FIRSTNAME,@LASTNAME,@USERNAME,@HASHEDPASSWORD,@ROLESFLAG, GETDATE(), NULL)
			END
		END
		ELSE
		BEGIN
		/* Update existing user info */
			IF NOT EXISTS(SELECT * FROM dbo.M_USERS WHERE USERNAME = @USERNAME)
				SELECT @ERROR = -1,	@ERRORTEXT = N'No Username '+@USERNAME + N' in M_USERS table';
			ELSE
			BEGIN
				UPDATE dbo.M_USERS 
				SET FIRSTNAME = @FIRSTNAME,
					LASTNAME = @LASTNAME,
					HASHEDPASSWORD = @HASHEDPASSWORD,
					ROLESFLAG = @ROLESFLAG
				WHERE USER_ID = @USERID
			END
		END
	END TRY
	BEGIN CATCH
		SELECT @ERROR = ERROR_NUMBER(), @ERRORTEXT = ERROR_MESSAGE();
	END CATCH
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO  [dbo].[M_COURSES] ([COURSE_ID],[COURSE_NAME])
VALUES 
	(1,N'Английский язык'),
	(2,N'Русский язык'),
	(3,N'C# & Dot.NET')


/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
INSERT INTO [dbo].[M_USERS]
           ([USER_ID]
           ,[FIRSTNAME]
           ,[LASTNAME]
           ,[USERNAME]
           ,[HASHEDPASSWORD]
           ,[ROLESFLAG]
	   ,[REGISTRATION_DATE]
	   ,[LAST_LOGON_DATE])
     VALUES
           (1,'John','Doe', 'Jdoe', '123', 7, '1900-01-01',NULL),
		   (2,'Nikolay', 'Piskarev', 'np','123',3,'1900-01-01',NULL),
		   (3,'Igor','Kalugin','ki','123',7,'1900-01-01',NULL),
		   (4,'Barak','Obama','bo','123',1,'1900-01-01',NULL)


/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO [dbo].[S_PK_GENERATOR] ([TABLE_NAME],[TABLE_ID]) 
VALUES 
	('M_USERS',5),
	('M_QUIZES',1),
	('M_QUESTIONS',1),
	('M_VARIANTS',1),
	('M_COURSES',4)
GO


GO

GO
PRINT N'Update complete.';


GO
