<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="FirstName" xml:space="preserve">
    <value>FirstName</value>
  </data>
  <data name="Id" xml:space="preserve">
    <value>Id</value>
  </data>
  <data name="LastName" xml:space="preserve">
    <value>LastName</value>
  </data>
  <data name="SQLLoadPersons" xml:space="preserve">
    <value>SELECT User_ID,FirstName,LastName,UserName,HashedPassword,RolesFlag FROM QuizDB.dbo.V_M_USERS;</value>
  </data>
  <data name="S_CantDeleteUser" xml:space="preserve">
    <value>This user can't be deleted, error :</value>
  </data>
  <data name="S_ErrorCreateQuestion" xml:space="preserve">
    <value>Error create question!</value>
  </data>
  <data name="S_ErrorCreateQuiz" xml:space="preserve">
    <value>Error create quiz!</value>
  </data>
  <data name="S_ErrorCreateVariants" xml:space="preserve">
    <value>Error create variant !</value>
  </data>
  <data name="S_ErrorDeleteQuestion" xml:space="preserve">
    <value>Error delete question!</value>
  </data>
  <data name="S_ErrorDeleteQuiz" xml:space="preserve">
    <value>Error delete quiz!</value>
  </data>
  <data name="S_ErrorDeleteUser" xml:space="preserve">
    <value>Delete user error!</value>
  </data>
  <data name="S_ErrorDeleteVariant" xml:space="preserve">
    <value>Error delete variant!</value>
  </data>
  <data name="S_ErrorEditQuestion" xml:space="preserve">
    <value>Error edit questions!</value>
  </data>
  <data name="S_ErrorEditVariant" xml:space="preserve">
    <value>Error edit variant!</value>
  </data>
  <data name="S_ErrorGetNextQuiestion" xml:space="preserve">
    <value>Error get next question !</value>
  </data>
  <data name="S_ErrorGetQuizList" xml:space="preserve">
    <value>Error get quiz list !</value>
  </data>
  <data name="S_ErrorGetUserDetails" xml:space="preserve">
    <value>Error get user details!</value>
  </data>
  <data name="S_ErrorGetUserList" xml:space="preserve">
    <value>Error get user list!</value>
  </data>
  <data name="S_ErrorGetVariants" xml:space="preserve">
    <value>Error get variants !</value>
  </data>
  <data name="S_ErrorLoadMyQuizes" xml:space="preserve">
    <value>Error load MyQuizes data !</value>
  </data>
  <data name="S_ErrorOpenAllQuizes" xml:space="preserve">
    <value>Error open allquizes statistic page !</value>
  </data>
  <data name="S_ErrorOpenAllUsers" xml:space="preserve">
    <value>Error open allusers statistic page !</value>
  </data>
  <data name="S_ErrorOpenQuiz" xml:space="preserve">
    <value>Error open quiz statistic page !</value>
  </data>
  <data name="S_ErrorOpenStatistic" xml:space="preserve">
    <value>Error open statistic page!</value>
  </data>
  <data name="S_ErrorOpenUser" xml:space="preserve">
    <value>Error open user statistic page !</value>
  </data>
  <data name="S_ErrorSaveAnswer" xml:space="preserve">
    <value>Error save answer!</value>
  </data>
  <data name="S_ErrorSaveQuestion" xml:space="preserve">
    <value>Error save question!</value>
  </data>
  <data name="S_ErrorSaveQuiz" xml:space="preserve">
    <value>Error save quiz!</value>
  </data>
  <data name="S_ErrorSaveUser" xml:space="preserve">
    <value>Error save user info!</value>
  </data>
  <data name="S_ErrorSaveVariants" xml:space="preserve">
    <value>Error save variant!</value>
  </data>
  <data name="S_ErrorViewQuestion" xml:space="preserve">
    <value>Error view questions!</value>
  </data>
  <data name="S_ErrorViewQuiz" xml:space="preserve">
    <value>Error view quiz!</value>
  </data>
  <data name="S_ErrorViewVariant" xml:space="preserve">
    <value>Error view variant!</value>
  </data>
  <data name="S_IncorrectUsername" xml:space="preserve">
    <value>Incorrect username or password</value>
  </data>
  <data name="S_InvalidHTTP" xml:space="preserve">
    <value>Invalid HTTP request!</value>
  </data>
  <data name="S_InvalidQuestionRequest" xml:space="preserve">
    <value>Invalid question request!</value>
  </data>
  <data name="S_InvalidQuiz" xml:space="preserve">
    <value>Quiz is not valid!</value>
  </data>
  <data name="S_InvalidQuizRequest" xml:space="preserve">
    <value>Invalid quiz request!</value>
  </data>
  <data name="S_InvalidUserInfo" xml:space="preserve">
    <value>Invalid user info!</value>
  </data>
  <data name="S_InvalidUserInfoError" xml:space="preserve">
    <value>Invalid user info, error :</value>
  </data>
  <data name="S_InvalidUserRequest" xml:space="preserve">
    <value>Invalid user request!</value>
  </data>
  <data name="S_InvalidVariantRequest" xml:space="preserve">
    <value>Invalid variant request!</value>
  </data>
  <data name="S_PasswordValidationError" xml:space="preserve">
    <value>Password validation failed, error :</value>
  </data>
  <data name="S_QuizNotFinished" xml:space="preserve">
    <value>Quiz is not finished, question view is not allowed !</value>
  </data>
  <data name="S_QuizNotFound" xml:space="preserve">
    <value>Quiz not found!</value>
  </data>
  <data name="S_UsernameExists" xml:space="preserve">
    <value>Username already exists!</value>
  </data>
  <data name="S_UserNotFound" xml:space="preserve">
    <value>User not found!</value>
  </data>
  <data name="Username" xml:space="preserve">
    <value>Username</value>
  </data>
</root>